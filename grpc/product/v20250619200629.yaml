openapi: 3.0.3
info:
  title: Product Service API
  description: API for managing products
  version: 1.0.0
servers:
  - url: http://localhost:40002
    description: Local server
tags:
  - name: products
    description: Operations about products
paths:
  /api/products:
    get:
      tags:
        - products
      summary: Get all products
      operationId: getAllProducts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
        - products
      summary: Create a new product
      operationId: createProduct
      requestBody:
        description: Product object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
        required: true
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
  /api/products/{id}:
    get:
      tags:
        - products
      summary: Find product by ID
      operationId: getProductById
      parameters:
        - name: id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      tags:
        - products
      summary: Update an existing product
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          description: ID of product to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Product object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
    delete:
      tags:
        - products
      summary: Delete a product
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          description: ID of product to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation
        '404':
          description: Product not found
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Smartphone"
        description:
          type: string
          example: "Latest model smartphone with advanced features"
        price:
          type: number
          format: double
          example: 999.99
        stockQuantity:
          type: integer
          format: int32
          example: 50
    ProductCreateRequest:
      type: object
      required:
        - name
        - price
        - stockQuantity
      properties:
        name:
          type: string
          example: "Smartphone"
        description:
          type: string
          example: "Latest model smartphone with advanced features"
        price:
          type: number
          format: double
          example: 999.99
        stockQuantity:
          type: integer
          format: int32
          example: 50
    ProductUpdateRequest:
      type: object
      required:
        - name
        - price
        - stockQuantity
      properties:
        name:
          type: string
          example: "Smartphone"
        description:
          type: string
          example: "Latest model smartphone with advanced features"
        price:
          type: number
          format: double
          example: 999.99
        stockQuantity:
          type: integer
          format: int32
          example: 50
